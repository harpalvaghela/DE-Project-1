{
	"name": "df_gold_loanpayment_scd1",
	"properties": {
		"folder": {
			"name": "DE_Project_1_DFs/Gold_Layer"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls_csvfiles",
						"type": "LinkedServiceReference"
					},
					"name": "loanpayments"
				},
				{
					"linkedService": {
						"referenceName": "ls_sql_database",
						"type": "LinkedServiceReference"
					},
					"name": "LoanPaymentTarget"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_sql_database",
						"type": "LinkedServiceReference"
					},
					"name": "sinkLoanPayment"
				},
				{
					"linkedService": {
						"referenceName": "ls_sql_database",
						"type": "LinkedServiceReference"
					},
					"name": "sinkLoanPaymentTable"
				}
			],
			"transformations": [
				{
					"name": "RenameColumnsLoanPayments"
				},
				{
					"name": "LoanPaymentsHashKey"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "splitLoanPayments"
				},
				{
					"name": "InsertAuditColLoanPayment"
				},
				{
					"name": "UpdateAuditColLoan"
				},
				{
					"name": "alterRow3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PaymentID as short,",
				"          LoanID as short,",
				"          PaymentDate as timestamp,",
				"          PaymentAmount as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'project1',",
				"     folderPath: 'silver/loanpayments') ~> loanpayments",
				"source(output(",
				"          PaymentID as integer,",
				"          HashKey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT PaymentID, HashKey FROM dbo.LoanPayments',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> LoanPaymentTarget",
				"loanpayments select(mapColumn(",
				"          each(match(1==1),",
				"               concat('src_',$$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumnsLoanPayments",
				"RenameColumnsLoanPayments derive(src_hashkey = crc32(concat(toString(src_PaymentID),toString(src_LoanID),toString(src_PaymentDate),toString(src_PaymentAmount)))) ~> LoanPaymentsHashKey",
				"LoanPaymentsHashKey, LoanPaymentTarget lookup(src_PaymentID == PaymentID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(isNull(PaymentID),",
				"     src_PaymentID == PaymentID && src_hashkey != HashKey,",
				"     disjoint: false) ~> splitLoanPayments@(InsertLoanPayment, UpdateLoanPayment)",
				"splitLoanPayments@InsertLoanPayment derive(src_createddate = currentTimestamp(),",
				"          src_createdby = 'Harpal',",
				"          src_updateddate = currentTimestamp(),",
				"          src_updatedby = 'Harpal') ~> InsertAuditColLoanPayment",
				"splitLoanPayments@UpdateLoanPayment derive(src_updatedBy = 'Harpal-Updated',",
				"          src_updateDate = currentTimestamp()) ~> UpdateAuditColLoan",
				"UpdateAuditColLoan alterRow(updateIf(1==1)) ~> alterRow3",
				"InsertAuditColLoanPayment sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PaymentID as integer,",
				"          LoanID as integer,",
				"          PaymentDate as timestamp,",
				"          PaymentAmount as double,",
				"          CreatedBy as string,",
				"          CreatedDate as timestamp,",
				"          UpdatedBy as string,",
				"          UpdatedDate as timestamp,",
				"          HashKey as long",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'LoanPayments',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PaymentID = src_PaymentID,",
				"          LoanID = src_LoanID,",
				"          PaymentDate = src_PaymentDate,",
				"          PaymentAmount = src_PaymentAmount,",
				"          CreatedBy = src_createdby,",
				"          CreatedDate = src_createddate,",
				"          UpdatedBy = src_updatedby,",
				"          UpdatedDate = src_updateddate,",
				"          HashKey = src_hashkey",
				"     )) ~> sinkLoanPayment",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PaymentID as integer,",
				"          LoanID as integer,",
				"          PaymentDate as timestamp,",
				"          PaymentAmount as double,",
				"          CreatedBy as string,",
				"          CreatedDate as timestamp,",
				"          UpdatedBy as string,",
				"          UpdatedDate as timestamp,",
				"          HashKey as long",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'LoanPayments',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['PaymentID'],",
				"     stagingSchemaName: '',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PaymentID = src_PaymentID,",
				"          LoanID = src_LoanID,",
				"          PaymentDate = src_PaymentDate,",
				"          PaymentAmount = src_PaymentAmount,",
				"          UpdatedBy = src_updatedBy,",
				"          UpdatedDate = src_updateDate,",
				"          HashKey = src_hashkey",
				"     )) ~> sinkLoanPaymentTable"
			]
		}
	}
}